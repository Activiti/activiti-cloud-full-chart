# Default values for activiti-cloud-full-example.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# global -- for common values see https://github.com/Activiti/activiti-cloud-common-chart/blob/develop/charts/common/README.md
global:
  application:
    # global.application.name -- configure application name for deployment
    name: "{{ .Release.Name }}"
  # global.registryPullSecrets -- Configure pull secrets for all deployments
  registryPullSecrets: []
  # global.extraEnv -- Use Yaml formatted string to add extra environment properties to all deployments, i.e.
  extraEnv: |
    - name: ACTIVITI_CLOUD_APPLICATION_NAME
      value: "{{ tpl .Values.global.application.name $ | required "global.application.name is required" }}"
    - name: ACTIVITI_KEYCLOAK_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: {{ tpl .Values.global.keycloak.clientSecretName $ }}
          key: clientId
    - name: ACTIVITI_KEYCLOAK_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: {{ tpl .Values.global.keycloak.clientSecretName $ }}
          key: clientSecret
  gateway:
    # global.gateway.domain -- Set to configure gateway domain template, i.e. {{ .Release.Namespace }}.1.3.4.5.nip.io
    # $ helm upgrade aae . --install --set global.gateway.domain=1.2.3.4.nip.io
    domain: "DOMAIN"
    # global.gateway.host -- Set to configure single host domain name for all services
    host: 'gateway-{{ .Release.Namespace }}.{{ template "common.gateway-domain" . }}'
    # host: '{{ template "common.gateway-domain" . }}'
    # global.gateway.http -- Set to false enables HTTPS configuration on all urls
    http: "true"
    # global.gateway.tlsacme -- Set to enable automatic TLS for ingress if https is enabled
    tlsacme: "false"
    # domain: ""
    # global.gateway.annotations -- Configure global annotations for all service ingresses
    annotations:
    #   certmanager.k8s.io/issuer: letsencrypt-prod
  keycloak:
    # global.keycloak.host -- Configure Keycloak host template
    host: 'identity-{{ .Release.Namespace }}.{{ template "common.gateway-domain" . }}'
    #host: '{{ template "common.gateway-host" . }}'
    # global.keycloak.url -- Set full url to configure external Keycloak, otherwise will be generated based on host
    url: ""
    # global.keycloak.realm -- Configure Keycloak realm
    realm: activiti
    # global.keycloak.resource -- Configure Keycloak resource
    resource: activiti
    # global.keycloak.clientId -- Configure Keycloak Client Id
    clientId: activiti-keycloak
    # global.keycloak.clientSecret -- Configure Keycloak Client Secret. Required if useExistingClientSecret set to false
    clientSecret: ""
    # global.keycloak.clientSecretName -- Configure Keycloak Client Secret Name. Secret will be created if `useExistingClientSecret` set to false
    clientSecretName: activiti-keycloak-client
    # global.keycloak.useExistingClientSecret -- Configure to use existing Keycloak clientId and clientSecret from Kubernetes Secret
    useExistingClientSecret: false
  messaging:
    # global.messaging.broker -- required messaging broker, rabbitmq or kafka
    broker: rabbitmq
    # global.messaging.partitioned -- enables partitioned messaging in combination with common chart values messaging.enabled=true and messaging.role=producer|consumer
    partitioned: false
    # global.messaging.partitionCount -- configures number of partitioned consumers
    partitionCount: 2
  rabbitmq:
    host: 'rabbitmq'
    username: guest
    password: guest
    extraEnv: ""
  #      - name: SPRING_RABBITMQ_PASSWORD
  #        valueFrom:
  #          secretKeyRef:
  #            name: rabbitmq-secret
  #            key: rabbitmq-password

  ## Kafka Configuration
  kafka:
    ## global.kafka.brokers -- Multiple brokers can be provided in a comma separated list, e.g. host1:port1,host2:port2
    brokers: 'kafka'
    extraEnv: |
      - name: ACT_AUDIT_PRODUCER_TRANSACTION_ID_PREFIX
        value: ""
activiti-cloud-identity:
  enabled: true
  nameOverride: keycloak
  rbac:
    create: false
  serviceAccount:
    create: false
  postgresql:
    persistence:
      enabled: true
    commonAnnotations:
      application: keycloak
    nameOverride: postgresql-id
    postgresqlPassword: "keycloak"
    resources:
      requests:
        cpu: 300m
        memory: 250Mi
      limits:
        cpu: "1"
        memory: 500Mi
  image:
    repository: alfresco/alfresco-identity-service
    tag: 1.6.0
    pullPolicy: IfNotPresent
  ingress:
    enabled: true
    rules:
      - host: '{{ include "common.keycloak-host" . }}'
        paths:
          - /auth
    tls: []
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
      nginx.ingress.kubernetes.io/affinity: cookie
      nginx.ingress.kubernetes.io/session-cookie-name: identity_affinity_route
      nginx.ingress.kubernetes.io/session-cookie-hash: sha1
      nginx.ingress.kubernetes.io/enable-cors: "false" # disable NGINX CORS as it's managed by Identity Service
  username: admin
  password: admin
  persistence:
    deployPostgres: true
    dbVendor: postgres
    dbPassword: keycloak
  extraVolumes: |
    - name: realm-secret
      secret:
        secretName: realm-secret
  extraVolumeMounts: |
    - name: realm-secret
      mountPath: "/realm/"
      readOnly: true
  extraEnv: |-
    - name: KEYCLOAK_USER
      value: {{ .Values.username }}
    - name: KEYCLOAK_PASSWORD
      value: {{ .Values.password }}
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"
    - name: KEYCLOAK_IMPORT
      value: /realm/realm.json
  resources:
    requests:
      memory: "750Mi"
    limits:
      memory: "1024Mi"
  realm:
    extraClients: []
    extraGroups:
      - name: hr
        realmRoles:
          - ACTIVITI_USER
      - name: sales
        realmRoles:
          - ACTIVITI_USER
      - name: testgroup
      - name: processadmin
        realmRoles:
          - ACTIVITI_ADMIN
    extraRealmRoles: []
    extraClientRoles: []
    extraUsers:
      - username: admin
        enabled: true
        firstName: admin
        lastName: admin
        email: admin@example.com
        credentials:
          - type: password
            value: password
        realmRoles:
          - offline_access
          - uma_authorization
        clientRoles:
          realm-management:
            - manage-users
            - manage-clients
            - manage-authorization
            - manage-events
            - manage-realm
            - create-client
            - impersonation
            - realm-admin
          broker:
            - read-token
          account:
            - manage-account
            - view-profile
      - username: superadminuser
        enabled: true
        firstName: "Super Admin"
        lastName: "User"
        email: superadminuser@example.com
        credentials:
          - type: password
            value: password
        realmRoles:
          - ACTIVITI_USER
          - ACTIVITI_ADMIN
          - ACTIVITI_MODELER
          - offline_access
          - uma_authorization
        clientRoles:
          realm-management:
            - manage-users
            - manage-clients
            - manage-authorization
            - manage-events
            - manage-realm
            - create-client
            - impersonation
            - realm-admin
          broker:
            - read-token
          account:
            - manage-account
            - view-profile
      - username: hruser
        enabled: true
        firstName: HR
        lastName: User
        email: hruser@example.com
        credentials:
          - type: password
            value: password
        realmRoles:
          - offline_access
          - uma_authorization
          - ACTIVITI_USER
        clientRoles:
          account:
            - manage-account
            - view-profile
        groups:
          - /hr
      - username: processadminuser
        enabled: true
        firstName: "Process Admin"
        lastName: User
        email: processadminuser@example.com
        credentials:
          - type: password
            value: password
        realmRoles:
          - offline_access
          - uma_authorization
          - ACTIVITI_ADMIN
        clientRoles:
          account:
            - manage-account
            - view-profile
        groups:
          - /processadmin
      - username: salesuser
        enabled: true
        firstName: Sales
        lastName: User
        email: salesuser@example.com
        credentials:
          - type: password
            value: password
        realmRoles:
          - offline_access
          - uma_authorization
          - ACTIVITI_USER
        clientRoles:
          account:
            - manage-account
            - view-profile
        groups:
          - /sales
      - username: testuser
        enabled: true
        firstName: Test
        lastName: User
        email: testuser@example.com
        credentials:
          - type: password
            value: password
        realmRoles:
          - offline_access
          - uma_authorization
          - ACTIVITI_USER
        clientRoles:
          account:
            - manage-account
            - view-profile
        groups:
          - /testgroup
      - username: hradmin
        enabled: true
        firstName: HR
        lastName: Admin
        email: hradmin@example.com
        credentials:
          - type: password
            value: password
        realmRoles:
          - offline_access
          - uma_authorization
          - ACTIVITI_USER
          - ACTIVITI_ADMIN
        clientRoles:
          account:
            - manage-account
            - view-profile
        groups:
          - /hr
      - username: testadmin
        enabled: true
        firstName: Test
        lastName: Admin
        email: testadmin@example.com
        credentials:
          - type: password
            value: password
        realmRoles:
          - offline_access
          - uma_authorization
          - ACTIVITI_USER
          - ACTIVITI_ADMIN
        clientRoles:
          account:
            - manage-account
            - view-profile
        groups:
          - /testgroup
      - username: modeler
        enabled: true
        firstName: Modeler
        lastName: User
        email: modeler@example.com
        credentials:
          - type: password
            value: password
        realmRoles:
          - offline_access
          - uma_authorization
          - ACTIVITI_MODELER
        clientRoles:
          account:
            - manage-account
            - view-profile
      - username: modeler-qa
        enabled: true
        firstName: Modeler
        lastName: User
        email: modeler-qa@example.com
        credentials:
          - type: password
            value: password
        realmRoles:
          - offline_access
          - uma_authorization
          - ACTIVITI_MODELER
        clientRoles:
          account:
            - manage-account
            - view-profile
activiti-cloud-identity-adapter:
  enabled: true
  nameOverride: activiti-cloud-identity-adapter
  service:
    name: identity-adapter
  image:
    repository: activiti/activiti-cloud-identity-adapter
    tag: 7.9.0-alpha.14
    pullPolicy: Always
  liquibase:
    enabled: false
  ingress:
    path: /identity-adapter-service
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-headers: Authorization, Content-Type, Accept
  postgresql:
    enabled: false
  readinessProbe:
    path: '{{ tpl .Values.ingress.path . | trimSuffix "/" }}/actuator/health/readiness'
  livenessProbe:
    path: '{{ tpl .Values.ingress.path . | trimSuffix "/" }}/actuator/health/liveness'
  resources:
    requests:
      cpu: 400m
      memory: 512Mi
    limits:
      cpu: "1"
      memory: 1024Mi
  extraEnv: |-
    - name: SERVER_SERVLET_CONTEXTPATH
      value: "{{ tpl .Values.ingress.path . }}"
    - name: SERVER_USEFORWARDHEADERS
      value: "true"
    - name: SERVER_TOMCAT_INTERNALPROXIES
      value: ".*"
activiti-cloud-modeling:
  enabled: true
  nameOverride: activiti-cloud-modeling
  service:
    name: modeling
  image:
    repository: activiti/activiti-cloud-modeling
    tag: 7.9.0-alpha.14
    pullPolicy: Always
  liquibase:
    enabled: true
  ingress:
    path: /modeling-service
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-headers: Authorization, Content-Type, Accept
  postgresql:
    enabled: true
  readinessProbe:
    path: '{{ tpl .Values.ingress.path . | trimSuffix "/" }}/actuator/health/readiness'
  livenessProbe:
    path: '{{ tpl .Values.ingress.path . | trimSuffix "/" }}/actuator/health/liveness'
  resources:
    requests:
      cpu: 400m
      memory: 512Mi
    limits:
      cpu: "1"
      memory: 1024Mi
  extraEnv: |-
    - name: SERVER_SERVLET_CONTEXTPATH
      value: "{{ tpl .Values.ingress.path . }}"
    - name: SERVER_USEFORWARDHEADERS
      value: "true"
    - name: SERVER_TOMCAT_INTERNALPROXIES
      value: ".*"
activiti-modeling-app:
  enabled: true
  nameOverride: activiti-modeling-app
  image:
    repository: activiti/activiti-modeling-app
    tag: master
    pullPolicy: Always
  service:
    name: modeling-app
    envType: frontend
  env:
    APP_CONFIG_AUTH_TYPE: OAUTH
    APP_CONFIG_BPM_HOST: '{{ include "common.gateway-url" . }}'
  ingress:
    path: /modeling
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-headers: Authorization, Content-Type, Accept
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 200m
      memory: 256Mi
postgresql:
  enabled: true
  postgresqlPassword: password
  resources:
    requests:
      cpu: 350m
      memory: 512Mi
  commonAnnotations:
    application: activiti
rabbitmq:
  fullnameOverride: rabbitmq
  enabled: true
  extraPlugins: ""
  auth:
    username: guest
    password: guest
    erlangCookie: ylY79lOdNUWsJEwAGdVQnhjSazV4QZKO=
  livenessProbe:
    timeoutSeconds: 90
  readinessProbe:
    timeoutSeconds: 90
  resources:
    requests:
      memory: 1500Mi
    limits:
      memory: 1500Mi
runtime-bundle:
  enabled: true
  nameOverride: runtime-bundle
  service:
    name: rb
  javaOpts:
    xmx: 2048m
    xms: 512m
  image:
    repository: activiti/example-runtime-bundle
    tag: 7.9.0-alpha.14
    pullPolicy: Always
  ingress:
    path: /rb
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-headers: Authorization, Content-Type, Accept
  postgresql:
    enabled: true
  messaging:
    enabled: true
    role: producer
  resources:
    limits:
      cpu: "2"
      memory: 2048Mi
    requests:
      cpu: 200m
      memory: 512Mi
  readinessProbe:
    path: '{{ tpl .Values.ingress.path . | trimSuffix "/" }}/actuator/health/readiness'
  livenessProbe:
    path: '{{ tpl .Values.ingress.path . | trimSuffix "/" }}/actuator/health/liveness'
  extraEnv: |-
    - name: SERVER_SERVLET_CONTEXTPATH
      value: "{{ tpl .Values.ingress.path . }}"
    - name: SERVER_USEFORWARDHEADERS
      value: "true"
    - name: SERVER_TOMCAT_INTERNALPROXIES
      value: ".*"
activiti-cloud-query:
  enabled: true
  nameOverride: activiti-cloud-query
  service:
    name: query
  javaOpts:
    xmx: 2048m
    xms: 512m
  image:
    repository: activiti/activiti-cloud-query
    tag: 7.9.0-alpha.14
    pullPolicy: Always
  liquibase:
    enabled: true
  ingress:
    path: /
    subPaths:
      - /query/?(.*)
      - /audit/?(.*)
      - /notifications/?(.*)
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-headers: Authorization, Content-Type, Accept
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      nginx.ingress.kubernetes.io/affinity: cookie
      nginx.ingress.kubernetes.io/session-cookie-change-on-failure: "true"
      nginx.ingress.kubernetes.io/session-cookie-name: activiti-cloud-query-session
  postgresql:
    enabled: true
  messaging:
    enabled: true
    role: consumer
  db:
    # activiti-cloud-query.db.ddlAuto -- set to 'none' temporarily rather than default 'validate' that breaks
    ddlAuto: none
  resources:
    limits:
      cpu: "1.5"
      memory: 2048Mi
    requests:
      cpu: 200m
      memory: 512Mi
  readinessProbe:
    path: '{{ tpl .Values.ingress.path . | trimSuffix "/" }}/actuator/health/readiness'
  livenessProbe:
    path: '{{ tpl .Values.ingress.path . | trimSuffix "/" }}/actuator/health/liveness'
  extraEnv: |-
    - name: GRAPHIQL_GRAPHQL_WEB_PATH
      value: '{{ tpl .Values.ingress.path . | trimSuffix "/" }}/notifications/graphql'
    - name: GRAPHIQL_GRAPHQL_WS_PATH
      value: '{{ tpl .Values.ingress.path . | trimSuffix "/" }}/notifications/ws/graphql'
    - name: SERVER_SERVLET_CONTEXTPATH
      value: "{{ tpl .Values.ingress.path . }}"
    - name: SERVER_USEFORWARDHEADERS
      value: "true"
    - name: SERVER_TOMCAT_INTERNALPROXIES
      value: ".*"
    - name: ACTIVITI_CLOUD_SWAGGER_QUERYBASEPATH
      value: "/query"
    - name: ACTIVITI_CLOUD_SWAGGER_AUDITBASEPATH
      value: "/audit"
activiti-cloud-connector:
  enabled: true
  nameOverride: activiti-cloud-connector
  service:
    name: example-cloud-connector
  image:
    repository: activiti/example-cloud-connector
    tag: 7.9.0-alpha.14
    pullPolicy: Always
  messaging:
    enabled: true
  extraEnv: |-
    - name: SERVER_SERVLET_CONTEXTPATH
      value: "{{ tpl .Values.ingress.path . }}"
    - name: SERVER_USEFORWARDHEADERS
      value: "true"
    - name: SERVER_TOMCAT_INTERNALPROXIES
      value: ".*"
  ingress:
    enabled: false
    path: /example-cloud-connector
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/enable-cors: "true"
      nginx.ingress.kubernetes.io/cors-allow-headers: Authorization, Content-Type, Accept
  resources:
    limits:
      cpu: "1"
      memory: 1024Mi
    requests:
      cpu: 150m
      memory: 256Mi
  readinessProbe:
    path: '{{ tpl .Values.ingress.path . | trimSuffix "/" }}/actuator/health/readiness'
  livenessProbe:
    path: '{{ tpl .Values.ingress.path . | trimSuffix "/" }}/actuator/health/liveness'
##
## Kafka chart configuration
##
## https://github.com/bitnami/charts/blob/master/bitnami/kafka/values.yaml
##
kafka:
  fullnameOverride: kafka
  enabled: false
  replicaCount: 1
  offsetsTopicReplicationFactor: 1
  ##
  ## Zookeeper chart configuration
  ##
  ## https://github.com/bitnami/charts/blob/master/bitnami/zookeeper/values.yaml
  ##
  zookeeper:
    fullnameOverride: zookeeper
    replicaCount: 1
